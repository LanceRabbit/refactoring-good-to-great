Intro - 1 min
 * me
 * this is pairing
 * tell, don't ask

data_clump.rb - 24 minutes, spend less time on coupling, 3-21 (18.5)
  * I have specs
  * roughly a B
  * move temp to query for orders_within_range
    * shorter methods
    * can reuse
    * don't have to read it; makes logic clearer
  * move select to Order#placed_between?(@start_date, @end_date)
  * identify data clump, passed in three places
  * extract to DateRange
    * start in spec
  * immediate win: coupling is reduced
    * the degree to which components rely on each other
    * fewer arguments is less coupling
    * nice place to hang an #include? method
  * move placed_between? to DateRange#include?
    * refactor include? to use a range: (start_date..end_date).include?(date)
  * create private Order#total_sales
  * change to inject(&:+)

null_object.rb - 6 m, 22-28; 19-24 5m
  * problems
    * violates tell don't ask
    * co-opts nil to stand in for 'no customer'
    * obscures the true intent of the code 
  * create NullCustomer
  * Poll: who has code like "if current_user ; ... ; end"

depend_upon_abstractions.rb
  * key idea to ease change: depend on abstractions
    * just because it's in a gem doesn't mean it's abstracted
  * problems:
    * changing gems or gateways affects lots of business logic
    * we'll have to stub out someone else's code
  * depend_upon_abstractions_fixed.rb
    * easy to change gems or providers
    * easy to mock
    * nice place to hang constants

when to refactor - 5m
  * god objects
    * wc -l
  * high churn files
  * bugs love company

Setup:
  clear history
  print notes
  clean repo
  get directory in anonymized/
  open churn in tab
  phone to no lock
  make sure temp extraction method works
      ddjjddkkVjdjjjkodef orders	pjoendkkVj<jxkkkoprivate

For next time:
  * don't forget to talk about pairing in the intro
  * make extracting that first temp into a method a leader command
  * explain parameter coupling in general terms, example didn't help
