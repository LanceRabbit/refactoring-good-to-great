* Intro
* Smells
  * Data clumps
    * Classify
  * Excessive conditionals
    * NullObject
  * Long argument lists
    * Why shorter is better
    * Method Object
  * God Objects
    * Extract class
  * Mystery Guest 
  * Stubbing the system under test
* General ideas
  * The Open-Closed Principle
  * Types of coupling
    * Pathological - if you call instance_var_set/get you BETTER know what you're doing
    * Global - factory_girl definitions
    * Control coupling - save(false)
    * Data coupling - passing a param
    * Message coupling - coupling to the name of a method
  * The beauty of the Decorator pattern

General:

introduce a smell with an example and specs
refactor it

try to stick to pure ruby; create rails app in separate dir if desired


data_clump.rb
  * replace select with query or order
  * this causes feature envy
  * move method to order
  * start_date, end_date are a data clump
  * extract to DateRange
  * immediate win: coupling is reduced
    * the degree to which components rely on each other
    * fewer methods is less coupling
  * create within_range? on DateRange
  * move temp to query on OrdersReport
    * can reuse
    * don't have to read it; makes logic clearer
    * ????? should this be a method on Order?

null_object.rb
  * breaking the core ideas of polymorphism 
    * rather than just sending a msg, we're asking and then reacting
    * would rather just send a message
  * we co-opted nil to stand in for 'no customer'
  * create NullCustomer


