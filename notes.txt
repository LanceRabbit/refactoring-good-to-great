Intro - 2 mins
 * me
 * software is hard because it has to change
  * a bridge, once built, never needs to change. as long as it satisfies its initial requirements, it's a success
  * imagine how much harder it would be to build a bridge that's easy to change. that's what writing software is like.
  * the best measure of system quality is how easy it is to change
 * tell, don't ask
 * ask questions
 * I have bribes

data_clump.rb - 24 minutes, spend less time on coupling, 3-21
  * roughly a B
  * move temp to query on OrdersReport
    * shorter methods
    * can reuse
    * don't have to read it; makes logic clearer
  * move select to Order#placed_between?(start_date, end_date)
  * identify data clump, passed in three places
  * extract to DateRange
  * immediate win: coupling is reduced
    * the degree to which components rely on each other
    * fewer arguments is less coupling
  * create within_range? on DateRange
  * refactor within_range? to use start_date..end_date.include?(date)
  * create private Order#total_sales
  * change to inject(&:+)

null_object.rb - 6 m, 22-28
  * breaking the core ideas of polymorphism 
    * rather than just sending a msg, we're asking and then reacting
    * would rather just send a message
  * we co-opted nil to stand in for 'no customer'
  * create NullCustomer
  * usable for Prospect vs Logged-in users
  * mention podcast

composition vs inheritance

open_closed_decorator.rb - 11:30m
  * change view to @user.welcome_message
  * create transparent decorators
  * proxy:
    def method_missing(method, *args, &block)
      @user.send(method, *args, &block)
    end
  * redefine welcome_message
  * wins:
    * logic is separated
    * new methods will still show up on decorated

when to refactor - 5m
  * god objects
    * wc -l
  * high churn files
  * bugs love company

Setup:
  boot macvim
  run tests
  clean repo
  get directory in levelup
  open churn in tab
  phone to no lock


New ideas / General notes:
  New example: BraintreeWrapper

