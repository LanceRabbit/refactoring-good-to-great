Intro - 1 min
 * me
 * tell, don't ask
 * this is pairing

data_clump.rb - 24 minutes, spend less time on coupling, 3-21 (18.5)
  * I have specs
  * roughly a B
  * move temp to query for orders_within_range
    * shorter methods
    * can reuse
    * don't have to read it; makes logic clearer
  * move select to Order#placed_between?(start_date, end_date)
  * identify data clump, passed in three places
  * extract to DateRange
  * immediate win: coupling is reduced
    * the degree to which components rely on each other
    * fewer arguments is less coupling
  * move placed_between? to DateRange#include?
  * refactor include? to use a range: start_date..end_date.include?(date)
  * create private Order#total_sales
  * change to inject(&:+)

null_object.rb - 6 m, 22-28; 19-24 5m
  * breaking the core ideas of polymorphism 
    * rather than just sending a msg, we're asking and then reacting
    * would rather just send a message
  * we co-opted nil to stand in for 'no customer'
  * create NullCustomer
  * Don't use if current_user, have non-logged-in users be a certain class

deco.rb - 11:30m
  * change view to @user.welcome_message
  * add method to user, but it's bad
  * create AdminPresenter and NormalUserPresenter
  * create transparent decorators
  * redefine welcome_message
  * wins:
    * logic is separated
    * new methods will still show up on decorated

depend_upon_abstractions.rb
  * key idea: depend on abstractions
  * just because it's in a gem doesn't mean it's abstracted
  * problems:
    * changing gems or gateways affects lots of business logic
    * we'll have to stub out someone else's code
  * depend_upon_abstractions_fixed.rb
    * easy to change gems
    * easy to change providers



when to refactor - 5m
  * god objects
    * wc -l
  * high churn files
  * bugs love company

Setup:
  boot into oldvim
  run tests
  clean repo
  get directory in levelup
  open churn in tab
  phone to no lock
